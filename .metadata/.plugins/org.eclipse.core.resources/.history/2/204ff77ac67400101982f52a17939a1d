package prajwal.in.controller;

import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import prajwal.in.entity.Admin;
import prajwal.in.entity.CaseWorker;
import prajwal.in.entity.CitizenInfo;
import prajwal.in.entity.Kid;
import prajwal.in.service.AdminService;
import prajwal.in.service.CaseWorkerService;
import prajwal.in.service.ApplicationService;

import java.util.List;
import java.util.Map;

@Controller
public class DashboardController {

    @Autowired
    private AdminService adminService;

    @Autowired
    private CaseWorkerService caseWorkerService;

    @Autowired
    private ApplicationService applicationService;

    @GetMapping("/dashboard")
    public String dashboard(Model model, HttpSession session) {
        String email = (String) session.getAttribute("email");
        String role = (String) session.getAttribute("role");

        if (email == null || role == null) {
            return "redirect:/login";  // Not logged in, redirect to login
        }

        boolean isAdmin = "ADMIN".equals(role);
        model.addAttribute("isAdmin", isAdmin);
        model.addAttribute("userName", session.getAttribute("userName"));

        // Fetch dashboard stats (same for admin & case worker or customize as per role)
        Map<String, Object> stats = applicationService.getDashboardStats();
        model.addAttribute("planCount", stats.get("planCount"));
        model.addAttribute("citizensApproved", stats.get("citizensApproved"));
        model.addAttribute("citizensDenied", stats.get("citizensDenied"));
        model.addAttribute("benefitsGiven", stats.get("benefitsGiven"));

        return "dashboard"; // Thymeleaf dashboard.html
    }

    @GetMapping("/api/applications")
    @ResponseBody
    public List<Object> getApplications(HttpSession session) {
        String email = (String) session.getAttribute("email");
        String role = (String) session.getAttribute("role");

        if (email == null || role == null) {
            return List.of();  // empty list if not logged in
        }

        if ("ADMIN".equals(role)) {
            return applicationService.findAllApplications();
        } else if ("CASEWORKER".equals(role)) {
            CaseWorker worker = caseWorkerService.findByEmail(email).orElse(null);
            if (worker != null) {
                return applicationService.findApplicationsByCaseWorkerId(worker.getId());
            }
        }
        return List.of();
    }
    @GetMapping("/dc/income-manual")
    public String showIncomeManualForm(Model model) {
        model.addAttribute("citizenInfo", new CitizenInfo());
        return "dc_income_details";
    }

    @GetMapping("/dc/education-manual")
    public String showEducationManualForm(Model model) {
        model.addAttribute("citizenInfo", new CitizenInfo());
        return "dc_education_details";
    }

    @GetMapping("/dc/kids-manual")
    public String showKidsManualForm(Model model) {
        model.addAttribute("caseNumber", "");
        model.addAttribute("kids", List.of(new Kid()));
        return "dc_kids_details";
    }

    
}
