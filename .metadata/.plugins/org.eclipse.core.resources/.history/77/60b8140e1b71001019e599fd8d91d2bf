package prajwal.in.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import jakarta.annotation.PostConstruct;
import prajwal.in.dto.LoginRequest;
import prajwal.in.entity.Admin;
import prajwal.in.repo.AdminRepo;

@Service
public class AdminService {

    @Autowired
    private AdminRepo adminRepo;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public Admin createAdmin(Admin admin) {
        admin.setPassword(passwordEncoder.encode(admin.getPassword()));
        return adminRepo.save(admin);
    }

    public ResponseEntity<String> login(LoginRequest request) {
        Optional<Admin> optionalAdmin = adminRepo.findByEmail(request.getEmail());

        if (optionalAdmin.isPresent()) {
            Admin admin = optionalAdmin.get();
            System.out.println("Stored hash: " + admin.getPassword());
            System.out.println("Raw password: " + request.getPassword());

            boolean matches = passwordEncoder.matches(request.getPassword(), admin.getPassword());
            System.out.println("Password matches? " + matches);

            if (matches) {
                return ResponseEntity.ok("Login Success");
            } else {
                System.out.println("Password mismatch for user: " + request.getEmail());
            }
        } else {
            System.out.println("User not found: " + request.getEmail());
        }
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
    }
    
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        System.out.println("Loading user by email: " + email);
        Admin admin = adminRepo.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with email: " + email));
        System.out.println("User found: " + admin.getEmail());
        return User.builder()
            .username(admin.getEmail())
            .password(admin.getPassword())
            .roles("ADMIN")
            .build();
    }


    public List<Admin> findAll() {
        return adminRepo.findAll();
    }
    @PostConstruct
    public void testPasswordEncoder() {
        String raw = "prajwal@123";
        String encoded = passwordEncoder.encode(raw);
        System.out.println("Test encoded password: " + encoded);
        System.out.println("Matches? " + passwordEncoder.matches(raw, encoded));
    }
}
