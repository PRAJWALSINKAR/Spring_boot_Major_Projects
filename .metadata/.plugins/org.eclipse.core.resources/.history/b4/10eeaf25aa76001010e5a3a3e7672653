package prajwal.in.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import prajwal.in.dto.BenefitTransactionDTO;
import prajwal.in.entity.BenefitTransaction;
import prajwal.in.entity.CitizenInfo;
import prajwal.in.entity.EligibilityResult;
import prajwal.in.repo.BenefitTransactionRepo;
import prajwal.in.repo.CitizenInfoRepo;
import prajwal.in.repo.EligibilityResultRepo;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class BenefitTransactionServiceImpl implements BenefitTransactionService {

    @Autowired
    private BenefitTransactionRepo transactionRepo;

    @Autowired
    private CitizenInfoRepo citizenInfoRepo;

    @Autowired
    private EligibilityResultRepo eligibilityResultRepo; // NEW repo to fetch eligibility results

    @Override
    public List<BenefitTransactionDTO> getTransactionsByCaseNumber(String caseNumber) {
        List<BenefitTransaction> transactions = transactionRepo.findByCaseNumber(caseNumber);
        return transactions.stream()
                .map(tx -> new BenefitTransactionDTO(
                        tx.getId(),
                        tx.getEdgTraceId(),
                        tx.getCaseNumber(),
                        tx.getPlanName(),
                        tx.getPlanStatus(),
                        tx.getBenefitAmount(),
                        tx.getAccountNumber(),
                        tx.getStartDate(),
                        tx.getEndDate(),
                        tx.getTransactionDate(),
                        tx.getTransactionStatus(),
                        tx.getTotalAmountReceived()
                ))
                .collect(Collectors.toList());
    }

    @Override
    public void sendMoneyToAllApproved() {
        // 1. Get only APPROVED eligibility results
        List<EligibilityResult> approvedPlans = eligibilityResultRepo.findByPlanStatus("Approved");

        // 2. Group by case number
        Map<String, List<EligibilityResult>> groupedByCase =
                approvedPlans.stream().collect(Collectors.groupingBy(EligibilityResult::getCaseNumber));

        // 3. For each case number, create transactions
        for (String caseNumber : groupedByCase.keySet()) {
            List<EligibilityResult> plans = groupedByCase.get(caseNumber);

            // Get citizen info (for account number)
            Optional<CitizenInfo> optInfo = citizenInfoRepo.findAllByCaseNumber(caseNumber)
                                                            .stream()
                                                            .findFirst();
            if (optInfo.isEmpty() || optInfo.get().getAccountNumber() == null) {
                // Skip if no account number
                continue;
            }
            String accountNumber = optInfo.get().getAccountNumber();

            // Calculate total cumulative benefit for this citizen
            double totalBenefit = plans.stream()
                    .mapToDouble(p -> p.getBenefitAmount() != null ? p.getBenefitAmount() : 0.0)
                    .sum();

            // 4. Create one transaction per approved plan
            for (EligibilityResult plan : plans) {
                BenefitTransaction tx = new BenefitTransaction();
                tx.setCaseNumber(caseNumber);
                tx.setPlanName(plan.getPlanName());
                tx.setPlanStatus(plan.getPlanStatus());
                tx.setBenefitAmount(plan.getBenefitAmount());
                tx.setAccountNumber(accountNumber);
                tx.setStartDate(plan.getStartDate());
                tx.setEndDate(plan.getEndDate());
                tx.setTransactionDate(LocalDate.now());
                tx.setTransactionStatus("Success");
                tx.setEdgTraceId(UUID.randomUUID().toString());
                tx.setTotalAmountReceived(totalBenefit);

                transactionRepo.save(tx);
            }
        }
    }
}
