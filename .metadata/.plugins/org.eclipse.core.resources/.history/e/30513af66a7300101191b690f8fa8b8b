package prajwal.in.service;

import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import prajwal.in.dto.CitizenDTO;
import prajwal.in.entity.CaseWorker;
import prajwal.in.entity.CitizenEntity;
import prajwal.in.repo.CaseWorkerRepo;
import prajwal.in.repo.CitizenRepo;

@Service
public class CitizenServiceImpl implements CitizenService {

    @Autowired
    private CitizenRepo citizenRepo;

    @Autowired
    private CaseWorkerRepo caseWorkerRepo;

    private String generateCaseNumber() {
        Random random = new Random();
        int num = 100 + random.nextInt(900); // 3-digit number between 100–999
        return String.valueOf(num);
    }

    @Override
    public String createCitizen(CitizenDTO dto, String caseWorkerEmail) {
        String ssn = dto.getSsn();

        // ✅ Backend Validation: SSN must start with "123" AND be exactly 8 digits
        if (ssn == null || !ssn.matches("^123\\d{5}$")) {
            return "Application not acceptable: Not a citizen of Oidiland (SSN must start with 123 and be 8 digits).";
        }

        // Fetch caseworker by email
        CaseWorker caseWorker = caseWorkerRepo.findByEmail(caseWorkerEmail).orElse(null);
        if (caseWorker == null) {
            return "CaseWorker not found.";
        }

        CitizenEntity entity = new CitizenEntity();
        entity.setFullName(dto.getFullName());
        entity.setEmail(dto.getEmail());
        entity.setMobileNumber(dto.getMobileNumber());
        entity.setGender(dto.getGender());
        entity.setDob(dto.getDob());
        entity.setSsn(ssn);
        entity.setCreatedBy(caseWorker);
        entity.setCaseNumber(generateCaseNumber());

        citizenRepo.save(entity);

        return "Application submitted successfully. Case Number: " + entity.getCaseNumber();
    }

    @Override
    public List<CitizenDTO> getCitizensByCaseWorker(String email) {
        CaseWorker caseWorker = caseWorkerRepo.findByEmail(email).orElse(null);
        if (caseWorker == null) return List.of();

        List<CitizenEntity> entities = citizenRepo.findByCreatedBy(caseWorker);

        return entities.stream().map(entity -> {
            CitizenDTO dto = new CitizenDTO();
            dto.setFullName(entity.getFullName());
            dto.setEmail(entity.getEmail());
            dto.setMobileNumber(entity.getMobileNumber());
            dto.setGender(entity.getGender());
            dto.setDob(entity.getDob());
            dto.setSsn(entity.getSsn());
            return dto;
        }).collect(Collectors.toList());
    }

    @Override
    public CitizenDTO getCitizenByCaseNumber(String caseNumber) {
        return citizenRepo.findByCaseNumber(caseNumber)
                .map(entity -> {
                    CitizenDTO dto = new CitizenDTO();
                    dto.setFullName(entity.getFullName());
                    dto.setEmail(entity.getEmail());
                    dto.setMobileNumber(entity.getMobileNumber());
                    dto.setGender(entity.getGender());
                    dto.setDob(entity.getDob());
                    dto.setSsn(entity.getSsn());
                    return dto;
                })
                .orElse(null);
    }
}
