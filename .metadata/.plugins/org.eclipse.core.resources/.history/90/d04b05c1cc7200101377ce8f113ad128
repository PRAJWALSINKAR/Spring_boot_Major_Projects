package prajwal.in.service;

import java.time.LocalDateTime;
import java.util.*;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Service;

import prajwal.in.dto.CaseWorkerRequest;
import prajwal.in.dto.LoginRequest;
import prajwal.in.entity.CaseWorker;
import prajwal.in.repo.CaseWorkerRepo;
import prajwal.in.util.EmailUtils;
import prajwal.in.util.PwdUtils;

@Service
public class CaseWorkerServiceImpl implements CaseWorkerService {

    @Autowired
    private CaseWorkerRepo caseWorkerRepo;

    @Autowired
    private EmailUtils emailUtils;

    // 1. Create Caseworker
    @Override
    public CaseWorker createCaseWorker(CaseWorker worker) {
        // Generate temp password & reset token
        String tempPassword = PwdUtils.generateRandomPwd();
        String resetToken = UUID.randomUUID().toString();

        worker.setTempPassword(tempPassword);
        worker.setResetToken(resetToken);
        worker.setPasswordResetRequired(true);
        worker.setResetTokenExpiry(LocalDateTime.now().plusHours(24));
        worker.setPassword(tempPassword);  // Store plain for now (encrypt later)

        CaseWorker saved = caseWorkerRepo.save(worker);

        // Send reset email
        sendResetEmail(saved.getEmail(), tempPassword, resetToken);

        return saved;
    }

    // 2. Send reset password email
    private void sendResetEmail(String email, String tempPassword, String resetToken) {
        String resetLink = "http://localhost:8080/reset-password?token=" + resetToken;

        StringBuilder body = new StringBuilder();
        body.append("<h2>Welcome to IES Portal</h2>");
        body.append("<p><strong>Temporary Password:</strong> ").append(tempPassword).append("</p>");
        body.append("<p>Click the below link to reset your password:</p>");
        body.append("<a href='").append(resetLink).append("'>Reset Password</a>");
        body.append("<p><i>This link will expire in 24 hours.</i></p>");

        emailUtils.sendEmail(email, "Reset Your IES Password", body.toString());
    }

    // 3. Login Logic
    @Override
    public ResponseEntity<Map<String, String>> login(LoginRequest request) {
        Optional<CaseWorker> optional = caseWorkerRepo.findByEmail(request.getEmail());
        if (optional.isEmpty()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Map.of("message", "Invalid credentials: email not found"));
        }

        CaseWorker worker = optional.get();

        if (!request.getPassword().equals(worker.getPassword())) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Map.of("message", "Invalid credentials: wrong password"));
        }

        return ResponseEntity.ok(Map.of(
                "message", "Login successful",
                "role", "CASEWORKER"
        ));
    }

    // 4. Fetch all caseworkers
    @Override
    public List<CaseWorker> findAll() {
        return caseWorkerRepo.findAll();
    }

    // 5. Find by reset token
    @Override
    public CaseWorker findByResetToken(String token) {
        return caseWorkerRepo.findByResetToken(token).orElse(null);
    }

    // 6. Reset password
    @Override
    public ResponseEntity<String> resetPassword(String token, String newPassword) {
        CaseWorker worker = findByResetToken(token);
        if (worker == null || worker.getResetTokenExpiry().isBefore(LocalDateTime.now())) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid or expired reset token");
        }

        worker.setPassword(newPassword);
        worker.setTempPassword(null);
        worker.setPasswordResetRequired(false);
        worker.setResetToken(null);
        worker.setResetTokenExpiry(null);

        caseWorkerRepo.save(worker);

        return ResponseEntity.ok("Password reset successful");
    }

    @Override
    public Optional<CaseWorker> findByEmail(String email) {
        return caseWorkerRepo.findByEmail(email);
    }

    @Override
    public void updateCaseWorker(CaseWorker worker) {
        caseWorkerRepo.save(worker);
    }

	@Override
	public boolean registerCaseWorker(CaseWorkerRequest form) {
		 Optional<CaseWorker> existing = caseWorkerRepo.findByEmail(form.getEmail());

		    if (existing.isPresent()) {
		        return false; // Email already registered
		    }

		    CaseWorker worker = new CaseWorker();
		    worker.setName(form.getName());
		    worker.setEmail(form.getEmail());
		    worker.setPhoneNumber(form.getPhoneNumber());
		    worker.setGender(form.getGender());
		    worker.setDob(form.getDob());
		    worker.setSsn(form.getSsn());

		    String tempPwd = PwdUtils.generateRandomPwd();
		    worker.setPassword(tempPwd);
		    worker.setAccStatus("LOCKED");

		    String body = "<h1>Temporary Password: </h1>" + tempPwd +
		                  "<br><a href='http://localhost:8080/reset-password?email=" + form.getEmail() + "'>Reset Password</a>";

		    boolean emailSent = emailUtils.sendEmail(form.getEmail(), "Reset Your Password", body);

		    if (emailSent) {
		        caseWorkerRepo.save(worker);
		        return true;
		    }

		    return false;
		}

}
