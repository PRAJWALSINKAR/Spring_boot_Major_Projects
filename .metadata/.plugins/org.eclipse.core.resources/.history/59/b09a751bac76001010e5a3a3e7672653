package prajwal.in.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import prajwal.in.dto.BenefitTransactionDTO;
import prajwal.in.entity.BenefitTransaction;
import prajwal.in.entity.CitizenInfo;
import prajwal.in.entity.EligibilityResult;
import prajwal.in.repo.BenefitTransactionRepo;
import prajwal.in.repo.CitizenInfoRepo;
import prajwal.in.repo.EligibilityResultRepo;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class BenefitTransactionServiceImpl implements BenefitTransactionService {

    @Autowired
    private BenefitTransactionRepo transactionRepo;

    @Autowired
    private CitizenInfoRepo citizenInfoRepo;

    @Autowired
    private EligibilityResultRepo eligibilityResultRepo;

    @Override
    public List<BenefitTransactionDTO> getTransactionsByCaseNumber(String caseNumber) {
        List<BenefitTransaction> transactions = transactionRepo.findByCaseNumber(caseNumber);
        return transactions.stream()
                .map(tx -> new BenefitTransactionDTO(
                        tx.getId(),
                        tx.getEdgTraceId(),
                        tx.getCaseNumber(),
                        tx.getPlanName(),
                        tx.getPlanStatus(),
                        tx.getBenefitAmount(),
                        tx.getAccountNumber(),
                        tx.getStartDate(),
                        tx.getEndDate(),
                        tx.getTransactionDate(),
                        tx.getTransactionStatus(),
                        tx.getTotalAmountReceived()
                ))
                .collect(Collectors.toList());
    }

    @Override
    public void sendMoneyToAllApproved() {
        // 1. Get APPROVED rows from eligibility_result (case-insensitive)
        List<EligibilityResult> approvedPlans = eligibilityResultRepo.findByPlanStatus("Approved");
        if (approvedPlans.isEmpty()) {
            // Try fallback with lowercase matching if DB contains differently
            approvedPlans = eligibilityResultRepo.findAll().stream()
                    .filter(er -> er.getPlanStatus() != null &&
                                  er.getPlanStatus().trim().equalsIgnoreCase("Approved"))
                    .collect(Collectors.toList());
        }

        if (approvedPlans.isEmpty()) {
            System.out.println("[SendMoney] No approved plans found in eligibility_result.");
            return;
        }

        // 2. Group approved plans by caseNumber
        Map<String, List<EligibilityResult>> groupedByCase =
                approvedPlans.stream().collect(Collectors.groupingBy(er -> er.getCaseNumber().trim()));

        for (String caseNumber : groupedByCase.keySet()) {
            List<EligibilityResult> plans = groupedByCase.get(caseNumber);

            // 3. Get CitizenInfo (for account number)
            Optional<CitizenInfo> optInfo = citizenInfoRepo.findAllByCaseNumber(caseNumber)
                                                           .stream()
                                                           .findFirst();
            if (optInfo.isEmpty() || optInfo.get().getAccountNumber() == null ||
                optInfo.get().getAccountNumber().isBlank()) {
                System.out.printf("[SendMoney] Skipping case %s: no account number found.%n", caseNumber);
                continue;
            }
            String accountNumber = optInfo.get().getAccountNumber();

            // 4. Calculate total benefit for citizen
            double totalBenefit = plans.stream()
                    .mapToDouble(p -> p.getBenefitAmount() != null ? p.getBenefitAmount() : 0.0)
                    .sum();

            // 5. Insert transaction per APPROVED plan if not already paid
            for (EligibilityResult plan : plans) {
                boolean alreadyPaid = transactionRepo.findByCaseNumber(caseNumber).stream()
                        .anyMatch(tx -> tx.getPlanName().equalsIgnoreCase(plan.getPlanName()) &&
                                        tx.getPlanStatus().equalsIgnoreCase("Approved"));

                if (alreadyPaid) {
                    System.out.printf("[SendMoney] Skipping duplicate payment for case %s, plan %s%n",
                                      caseNumber, plan.getPlanName());
                    continue;
                }

                BenefitTransaction tx = new BenefitTransaction();
                tx.setCaseNumber(caseNumber);
                tx.setPlanName(plan.getPlanName());
                tx.setPlanStatus(plan.getPlanStatus());
                tx.setBenefitAmount(plan.getBenefitAmount());
                tx.setAccountNumber(accountNumber);
                tx.setStartDate(plan.getStartDate());
                tx.setEndDate(plan.getEndDate());
                tx.setTransactionDate(LocalDate.now());
                tx.setTransactionStatus("Success");
                tx.setEdgTraceId(UUID.randomUUID().toString());
                tx.setTotalAmountReceived(totalBenefit);

                transactionRepo.save(tx);
                System.out.printf("[SendMoney] Paid case %s for plan %s amount %.2f%n",
                                  caseNumber, plan.getPlanName(), plan.getBenefitAmount());
            }
        }
    }
}
